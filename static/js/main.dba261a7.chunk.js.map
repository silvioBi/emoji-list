{"version":3,"sources":["components/app/App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","emojiList","activeEmoji","lastCopied","visible","handleSearchInputChange","bind","assertThisInitialized","handleCopyToClipboard","onDismiss","_this2","fetch","then","response","json","data","setState","objectSpread","content","_this3","length","react_default","a","createElement","className","map","emoji","Card","key","name","CardTitle","onClick","char","CardText","codes","Input","type","id","placeholder","bsSize","onChange","Alert","color","isOpen","toggle","event","results","text","target","value","filter","keywords","includes","toLowerCase","str","_this4","el","document","body","appendChild","select","execCommand","removeChild","self","setTimeout","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_app_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dba261a7.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Alert, Input, Card, CardTitle, CardText } from 'reactstrap'\n\nimport './App.css'\n\n// Url to fetch the emoji list (at the moment v.11.0.1)\nconst emojiDataUrl = 'https://unpkg.com/emoji.json@11.0.1/emoji.json'\n\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      emojiList: [], // All the emoji\n      activeEmoji: [], // The active emoji\n      lastCopied: '', // The emoji that has just been copied on the clipboard\n      visible: false, // Wheter to show or not the alert message\n    }\n\n    this.handleSearchInputChange = this.handleSearchInputChange.bind(this)\n    this.handleCopyToClipboard = this.handleCopyToClipboard.bind(this)\n    this.onDismiss = this.onDismiss.bind(this)\n  }\n\n  // Fetch the emoji list and set the state accordingly\n  componentDidMount() {\n    fetch(emojiDataUrl)\n      .then(response => response.json())\n      .then(data => {\n        this.setState({ ...this.state, emojiList: data, activeEmoji: data })\n      });\n  }\n\n  render() {\n    let content;\n    // Do we have loaded the emoji yet?\n    if (this.state.emojiList.length === 0)\n      content = <div className=\"message\">Loading emoji âŒ›</div>\n    // No emoji matches our query string?\n    else if (this.state.activeEmoji.length === 0)\n      content = <div className=\"message\">No emoji found ðŸ˜¢</div>\n    // We are good to go, let's show the active emoji\n    else content = <div className=\"deck\">\n      {this.state.activeEmoji.map(emoji => (\n        <Card key={emoji.name}>\n          <CardTitle onClick={() => this.handleCopyToClipboard(emoji.char)}>{emoji.char}</CardTitle>\n          <CardText>\n            {/* <code onClick={() => this.handleCopyToClipboard(emoji.codepoints)}>{emoji.codepoints}</code><br /> */}\n            <code onClick={() => this.handleCopyToClipboard(emoji.codes)}>{emoji.codes}</code>\n          </CardText>\n        </Card>))}\n    </div>\n\n    // Return the searchbar plus the correct content\n    return (\n      <div className=\"emoji-list-app\">\n\n        {/* Out search bar */}\n        <header className=\"search-field-wrapper\">\n          <Input type=\"text\" name=\"search-icon\" id=\"searchIcon\" placeholder=\"Look for an emoji\" bsSize=\"lg\" onChange={this.handleSearchInputChange} />\n        </header>\n\n        {/* Display the page content */}\n        {content}\n\n        {/* Tell the user we have succesfully copied the emoji */}\n        <Alert color=\"info\" isOpen={this.state.visible} toggle={this.onDismiss}>\n          Copied <b>{this.state.lastCopied}</b> to the clipboard!\n        </Alert>\n        \n      </div>\n    )\n  }\n\n  // Hide the alert bar\n  onDismiss() {\n    this.setState({ ...this.state, visible: false });\n  }\n\n  // When the user imputs something in the search bar look for the matching emoji\n  handleSearchInputChange(event) {\n    let text = event.target.value\n    let results;\n\n    // If the user has typed something more than just a letter look for it else just show all the emoji\n    if (text.length > 1) {\n      results = this.state.emojiList.filter(emoji => (\n        emoji.keywords.includes(text.toLowerCase()) ||\n        emoji.name.includes(text.toLowerCase()) ||\n        emoji.char.includes(text.toLowerCase())\n      ))\n    } else\n      results = this.state.emojiList\n    \n    // Add the results to the state\n    this.setState({\n      ...this.state,\n      activeEmoji: results,\n    })\n  }\n\n  // Copy the str to the user clipboard\n  handleCopyToClipboard(str) {\n    // To copy the value create a temporary DOM element anc copy its content\n    const el = document.createElement('textarea');\n    el.value = str;\n    document.body.appendChild(el);\n    el.select();\n    document.execCommand('copy');\n    document.body.removeChild(el);\n\n    this.setState({\n      ...this.state,\n      lastCopied: str,\n      visible: true,\n    })\n\n    // Hide the alert after a timeout\n    let self = this\n    setTimeout(() =>\n      self.setState({\n        ...this.state,\n        visible: false,\n      }), 2000);\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}